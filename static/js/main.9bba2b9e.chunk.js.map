{"version":3,"sources":["imgs/television.svg","imgs/sunset.svg","imgs/dawn.svg","imgs/globe.svg","imgs/humidity.svg","imgs/manometer.svg","imgs/windy.svg","imgs/clouds.svg","imgs/thermometer.svg","components/top-part.js","components/input-part.js","components/info-part.js","components/app-info-part.js","components/error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopPart","props","handleChange","bind","e","this","changeLightMode","target","checked","toString","lightModeP","lightMode","className","type","id","onChange","htmlFor","onClick","checkSomething","src","mainIcon","alt","React","Component","Proposition","valueCheck","value","InputPart","handleValueChange","handleStartSearchingNewCity","handleInputChange","key","name","startSearchingNewCity","countryShort","filteredCities","propositionDiv","flagValue","country","cities","filter","el","toLowerCase","indexOf","inputValue","length","map","city","propositionClick","onKeyDown","GridElement","valueH3","tempColor","Number","description","style","color","sign","imgSrc","classMore","CoordinatesElement","globeImg","x","y","SunriseAndDawn","sunriseTime","sunsetTime","sunriseTimeDistance","sunsetTimeDistance","sunrise","sunset","sunriseDate","Date","sunsetDate","now","formatDistanceStrict","addSuffix","getHours","getMinutes","sunriseImg","sunsetImg","InfoPart","temperature","cloudiness","humidity","pressure","wind","coordX","coordY","flagID","weatherObj","main","temp","toFixed","clouds","all","speed","sys","coord","lon","lat","weather","icon","thermometerImg","cloudsImg","humidityImg","manometerImg","windyImg","AppInfoPart","href","NoCity","timerID","setTimeout","turnOffError","console","log","App","state","input","error","handleLightModeChange","getNewWeather","fetch","json","citiesJson","setState","localStorage","startCity","weatherObjJson","setItem","newCity","newCityRes","cod","darkMode","television","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bba2b9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/television.cbebe7b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.b2eb7790.svg\";","module.exports = __webpack_public_path__ + \"static/media/dawn.78ff4782.svg\";","module.exports = __webpack_public_path__ + \"static/media/globe.dca05a71.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.20d9a18b.svg\";","module.exports = __webpack_public_path__ + \"static/media/manometer.9232630a.svg\";","module.exports = __webpack_public_path__ + \"static/media/windy.5d97d9c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.f2418a2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/thermometer.f592f9a3.svg\";","import React from 'react';\r\n\r\nclass TopPart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.changeLightMode(e.target.checked.toString());\r\n  }\r\n\r\n  render() {\r\n    const lightMode = this.props.lightMode;\r\n    let lightModeP;\r\n\r\n    if (lightMode === \"true\") {\r\n      lightModeP = <p className=\"light-mode\">Light mode</p>;\r\n    } else {\r\n      lightModeP = <p className=\"dark-mode\">Dark mode</p>\r\n    }\r\n\r\n    return (\r\n      <div className=\"top-part\">\r\n        <nav>\r\n        <div className=\"change-mode-div\">\r\n          {lightModeP}\r\n          <div className=\"checkbox\">\r\n            <input className=\"check\" type=\"checkbox\" id=\"check\" onChange={this.handleChange} />\r\n            <label htmlFor=\"check\"></label>\r\n            <div className=\"rays\">\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n              <div className=\"ray\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n          <h2 onClick={this.props.checkSomething}><span>Weather App</span></h2>\r\n          <div className=\"main-icon-container\">\r\n            <img className='main-icon' src={this.props.mainIcon} alt={this.props.mainIcon} />\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopPart;\r\n","import React from 'react';\r\n\r\nclass Proposition extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"proposition\" onClick={() => this.props.valueCheck(this.props.value)}>\r\n        <span className=\"proposition-span\">{this.props.value}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InputPart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleValueChange = this.handleValueChange.bind(this);\r\n    this.handleStartSearchingNewCity = this.handleStartSearchingNewCity.bind(this);\r\n  }\r\n\r\n  handleValueChange(e) {\r\n    this.props.handleInputChange(e.target.value);\r\n  }\r\n\r\n  handleStartSearchingNewCity(e) {\r\n    if (e.key === 'Enter' || e.target.name === 'main-button') {\r\n      this.props.startSearchingNewCity();\r\n    } else {\r\n\r\n    }\r\n    // this.props.startSearchingNewCity\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let flagValue = 'http://satyr.io/20x20?delay=3g';\r\n    let countryShort,cities,filteredCities,propositionDiv;\r\n    if (typeof this.props.flagValue === 'object') {\r\n      /*Could have done it with just taking the country's abbreviation and replacing it in some places, but\r\n        with what I had in mind(having a static default img) this would actually take more time */\r\n\r\n      flagValue = `http://satyr.io/80x60?flag=${this.props.flagValue.country}`;\r\n      countryShort = this.props.flagValue.country;\r\n    }\r\n    if (this.props.cities) {\r\n      cities = this.props.cities;\r\n      filteredCities = cities.filter((el) => {\r\n        return el.toLowerCase().indexOf(this.props.inputValue.toLowerCase()) > -1;\r\n      });\r\n    }\r\n\r\n    if (this.props.inputValue.length > 0 && filteredCities.length > 0) {\r\n     propositionDiv =\r\n      <div className=\"propositionsDiv\">\r\n      {filteredCities.map(city => (\r\n      <Proposition value={city}\r\n                   key={city}\r\n                   valueCheck={this.props.propositionClick}/>\r\n\r\n      ))}\r\n      </div>\r\n    }\r\n\r\n    return (\r\n      <div className='input-part'>\r\n        <div className=\"input-container\">\r\n         {this.props.inputValue.length > 0 ?\r\n           <span className=\"input-placeholder dirty\">City</span> :\r\n           <span className=\"input-placeholder\">City...</span>\r\n         }\r\n          <input value={this.props.inputValue}\r\n                 className=\"main-input\"\r\n                 type=\"text\"\r\n                 onChange={this.handleValueChange}\r\n                 onKeyDown={this.handleStartSearchingNewCity}\r\n                 />\r\n          {propositionDiv}\r\n\r\n          {this.props.inputValue.length > 0 &&\r\n            <button name=\"main-button\" className=\"main-button\" type=\"button\" onClick={this.handleStartSearchingNewCity}>Check</button>\r\n          }\r\n\r\n          <div className=\"info-div\">\r\n            <img className=\"country-flag\" src={flagValue} alt=\"country_flag\" />\r\n            <p>{countryShort}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InputPart;\r\n","import React from 'react';\r\nimport sunsetImg from '../imgs/sunset.svg';\r\nimport sunriseImg from '../imgs/dawn.svg';\r\nimport globeImg from '../imgs/globe.svg';\r\nimport humidityImg from '../imgs/humidity.svg';\r\nimport manometerImg from '../imgs/manometer.svg';\r\nimport windyImg from '../imgs/windy.svg';\r\nimport cloudsImg from '../imgs/clouds.svg';\r\nimport thermometerImg from '../imgs/thermometer.svg';\r\nimport { formatDistanceStrict } from 'date-fns';\r\n//celc &#8451; ℃\r\n//fahr &#8457; ℉\r\n\r\nclass GridElement extends React.Component {\r\n\r\n  render() {\r\n    const tempColor = this.props.value;\r\n    let valueH3;\r\n    if (Number(tempColor) > 25 && this.props.description === 'Temperature') {\r\n      valueH3 = <h3 className=\"grid-element-value\" style={{color: \"red\"}} >{this.props.value}<span className=\"celsius\">℃</span></h3>\r\n    } else if (tempColor < 5 && this.props.description === 'Temperature') {\r\n      valueH3 = <h3 className=\"grid-element-value\" style={{color: \"lightblue\"}} >{this.props.value}<span className=\"celsius\">℃</span></h3>\r\n    } else {\r\n      valueH3 = <h3 className=\"grid-element-value\" >{this.props.value}<span className=\"celsius\">{this.props.sign}</span></h3>\r\n    }\r\n    return (\r\n      <div className=\"info-grid-element\">\r\n        <img className=\"info-grid-element-img\" src={this.props.imgSrc} alt={this.props.imgSrc} />\r\n        <div className={\"info-div \" + this.props.classMore}>\r\n          <h3 className=\"grid-element-description\">{this.props.description} :</h3>\r\n          {valueH3}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CoordinatesElement extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"info-grid-element\">\r\n        <div className=\"img-div\">\r\n          <p className=\"coordinates-title\">Coordinates</p>\r\n          <img className=\"info-grid-element-img\" src={globeImg} alt={globeImg} />\r\n\r\n        </div>\r\n        <div className={\"info-div \" + this.props.classMore}>\r\n          <p>X: {this.props.x}</p>\r\n        </div>\r\n        <div className={\"info-div \" + this.props.classMore}>\r\n          <p>Y: {this.props.y}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SunriseAndDawn extends React.Component {\r\n\r\n  render() {\r\n\r\n    let sunriseTime,sunsetTime,sunriseTimeDistance,sunsetTimeDistance;\r\n\r\n  if (this.props.sunrise && this.props.sunset) {\r\n    let {sunrise, sunset} = this.props;\r\n    let sunriseDate = new Date(sunrise);\r\n    let sunsetDate = new Date(sunset);\r\n    let now = new Date();\r\n\r\n    sunriseTimeDistance = formatDistanceStrict(sunriseDate,now,{addSuffix: true});\r\n    sunsetTimeDistance = formatDistanceStrict(sunsetDate,now,{addSuffix: false});\r\n\r\n    //sunrisetime fix\r\n    if (sunriseDate.getHours().toString().length === 2) {\r\n      sunriseTime = sunriseDate.getHours().toString() + \":\";\r\n\r\n      //minutes fix\r\n      if (sunriseDate.getMinutes().toString().length === 2) {\r\n        sunriseTime += sunriseDate.getMinutes().toString();\r\n      } else {\r\n        sunriseTime += \"0\";\r\n        sunriseTime += sunriseDate.getMinutes().toString();\r\n      }\r\n    } else {\r\n      sunriseTime = \"0\";\r\n      sunriseTime += sunriseDate.getHours().toString() + \":\";\r\n\r\n      //minutes fix\r\n      if (sunriseDate.getMinutes().toString().length === 2) {\r\n        sunriseTime += sunriseDate.getMinutes().toString();\r\n      } else {\r\n        sunriseTime += \"0\";\r\n        sunriseTime += sunriseDate.getMinutes().toString();\r\n      }\r\n    }\r\n\r\n    //sunsettime fix\r\n    if (sunsetDate.getHours().toString().length === 2) {\r\n      sunsetTime = sunsetDate.getHours().toString() + \":\";\r\n\r\n      //minutes fix\r\n      if (sunsetDate.getMinutes().toString().length === 2) {\r\n        sunsetTime += sunsetDate.getMinutes().toString();\r\n      } else {\r\n        sunsetTime += \"0\";\r\n        sunsetTime += sunsetDate.getMinutes().toString();\r\n      }\r\n    } else {\r\n      sunsetTime = \"0\";\r\n      sunsetTime += sunsetDate.getHours().toString() + \":\";\r\n\r\n      //minutes fix\r\n      if (sunsetDate.getMinutes().toString().length === 2) {\r\n        sunsetTime += sunsetDate.getMinutes().toString();\r\n      } else {\r\n        sunsetTime += \"0\";\r\n        sunsetTime += sunsetDate.getMinutes().toString();\r\n      }\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=\"info-grid-element sunriseSunset\">\r\n        <div className=\"sunrise\">\r\n          <p>Sunrise</p>\r\n          <img className=\"info-grid-element-img\" src={sunriseImg} alt={sunriseImg} />\r\n          <p className=\"time-sun\">at {sunriseTime}</p>\r\n          <p className=\"time-from-now\">{sunriseTimeDistance}</p>\r\n        </div>\r\n        <div className=\"sunset span3-4\">\r\n          <p>Sunset</p>\r\n          <img className=\"info-grid-element-img\" src={sunsetImg} alt={sunsetImg} />\r\n          <p className=\"time-sun\">at {sunsetTime}</p>\r\n          <p className=\"time-from-now\">in {sunsetTimeDistance}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InfoPart extends React.Component {\r\n\r\n  render() {\r\n    let temperature,cloudiness,humidity,pressure,wind,sunrise,sunset,coordX,\r\n        coordY,description,flagID,name;\r\n\r\n    if(typeof this.props.weatherObj === 'object') {\r\n      let weatherObj = this.props.weatherObj;\r\n      temperature = weatherObj.main.temp.toFixed();\r\n      cloudiness = weatherObj.clouds.all;\r\n      humidity = weatherObj.main.humidity;\r\n      pressure = weatherObj.main.pressure;\r\n      wind = weatherObj.wind.speed;\r\n      sunrise = (weatherObj.sys.sunrise * 1000);\r\n      sunset = (weatherObj.sys.sunset * 1000);\r\n      coordX = weatherObj.coord.lon;\r\n      coordY = weatherObj.coord.lat;\r\n      description = weatherObj.weather[0].description;\r\n      flagID = weatherObj.weather[0].icon;\r\n      name = weatherObj.name;\r\n    }\r\n    return (\r\n      <div className='info-part'>\r\n      <p>Current Weather in {name}:</p>\r\n      <p className=\"weather-description\">\r\n        <img className=\"weather-icon weather-icon-left\" src={`http://openweathermap.org/img/wn/${flagID}@2x.png`} alt='icon' />\r\n        {description}\r\n        <img className=\"weather-icon weather-icon-right\" src={`http://openweathermap.org/img/wn/${flagID}@2x.png`} alt='icon' />\r\n      </p>\r\n        <div className=\"info-scroll\">\r\n         <div className=\"info-grid-container\">\r\n         <GridElement imgSrc={thermometerImg}\r\n                      description='Temperature'\r\n                      value={temperature}\r\n                      classMore='span2-4'\r\n                      sign='℃'\r\n         />\r\n         <GridElement imgSrc={cloudsImg}\r\n                       description='Cloudiness'\r\n                       value={cloudiness}\r\n                       classMore='span2-4'\r\n                       sign='%'\r\n        />\r\n        <GridElement imgSrc={humidityImg}\r\n                      description='Humidity'\r\n                      value={humidity}\r\n                      classMore='span2-4'\r\n                      sign='%'\r\n        />\r\n        <GridElement imgSrc={manometerImg}\r\n                      description='Pressure'\r\n                      value={pressure}\r\n                      classMore='span2-4'\r\n                      sign=\"\"\r\n        />\r\n        <GridElement imgSrc={windyImg}\r\n                      description='Wind'\r\n                      value={wind}\r\n                      classMore='span2-4'\r\n                      sign=\"m/s\"\r\n        />\r\n        <SunriseAndDawn sunrise={sunrise} sunset={sunset} />\r\n        <CoordinatesElement x={coordX} y={coordY} />\r\n\r\n\r\n         </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default InfoPart;\r\n","import React from 'react';\r\n\r\nclass AppInfoPart extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-info-part\">\r\n        <div className=\"api-part\">\r\n          <a href=\"https://openweathermap.org/\" >Weather API</a>\r\n          <a href=\"http://satyr.io/\" >Flags API</a>\r\n          <a href=\"https://www.flaticon.com/\">Icons site</a>\r\n          <a href=\"https://github.com/Havir-S\">Bundled together by Christopher Saffron </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppInfoPart;\r\n","import React from 'react';\r\n\r\nclass NoCity extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setTimeout(() => {\r\n      this.props.turnOffError();\r\n    },5000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('error disappear');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"error\" onClick={this.props.turnOffError}>\r\n        <div className=\"error-text\">\r\n          No City Found with such name!\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default NoCity;\r\n","import React from 'react';\nimport './scss/mainStyle.scss';\nimport television from './imgs/television.svg';\nimport TopPart from './components/top-part.js';\nimport InputPart from './components/input-part.js';\nimport InfoPart from './components/info-part.js';\nimport AppInfoPart from './components/app-info-part.js';\nimport NoCity from './components/error.js';\n// https://openweathermap.org/weather-conditions TUTAJ JUZ SA IKONKI\n\n// fetch('https://raw.githubusercontent.com/Havir-S/weather-app/master/locations.json')\n//   .then(res => res.json())\n//   .then(res => {\n//     console.log(res.cities);\n//   });\n\n  // fetch('http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=c67eaa7e77ad12d3669b53dc4b0112e2&units=metric')\n  //   .then(res => res.json())\n  //   .then(res => console.log(res));\n\n  // function checkLocalStorage(searchedValue) {\n  //   if(localStorage) {\n  //     if (localStorage.getItem(searchedValue)) {\n  //       return localStorage.getItem(searchedValue);\n  //     }\n  //   } else if(searchedValue === 'city') {\n  //     return getLondon();\n  //   }\n  // }\n\n  //   function getCities() {\n  //     let cities;\n  //   fetch('https://raw.githubusercontent.com/Havir-S/weather-app/master/locations.json')\n  //     .then(data => data.json())\n  //     .then(data => {\n  //       cities = data.cities\n  //       console.log(cities);\n  //       return cities;\n  //     })\n  //\n  // }\n\n  // async function getLondon() {\n  //   let london = await fetch('http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=c67eaa7e77ad12d3669b53dc4b0112e2&units=metric');\n  //   let londonRes = await london.json();\n  //\n  //   return londonRes.name;\n  // }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"\",\n      lightMode: 1,\n      input: \"\",\n      weatherObj: \"\",\n      cities: [],\n      error: 0\n    };\n    this.handleLightModeChange = this.handleLightModeChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.getNewWeather = this.getNewWeather.bind(this);\n    this.propositionClick = this.propositionClick.bind(this);\n    this.turnOffError = this.turnOffError.bind(this);\n  }\n\n  async componentDidMount() {\n    //getting the cities name propositions from github\n    try {\n    const cities = await fetch('https://raw.githubusercontent.com/Havir-S/weather-app/master/locations.json');\n    const citiesJson = await cities.json();\n    this.setState({cities: citiesJson.cities});\n\n    //LocalStorage values check\n    if (localStorage) {\n      //city check\n      if (localStorage.city) {\n        //we have a city -- we call the api on that city\n        let startCity = localStorage.city;\n        let weatherObj = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${localStorage.city}&APPID=c67eaa7e77ad12d3669b53dc4b0112e2&units=metric`);\n        let weatherObjJson = await weatherObj.json();\n        this.setState({weatherObj: weatherObjJson});\n        this.setState({city: startCity});\n      } else {\n        //we do not have a city -- we set the default to London\n        let weatherObj = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London&APPID=c67eaa7e77ad12d3669b53dc4b0112e2&units=metric`);\n        let weatherObjJson = await weatherObj.json();\n        this.setState({weatherObj: weatherObjJson});\n        localStorage.setItem('city','London');\n        this.setState({city:'London'});\n      }\n\n      //lightmode check\n      if (localStorage.lightMode === \"true\" || localStorage.lightMode === \"false\") {\n        //we do have it\n        this.setState({lightMode: localStorage.lightMode});\n      } else {\n        localStorage.setItem('lightMode',\"true\");\n        this.setState({lightMode: \"true\"});\n        //we do not have lightMode property\n      }\n\n    } else {\n      console.log('We have no access to localStorage, no value will be remembered.');\n    }\n  }\n  catch(err) {\n    console.log(err);\n  }\n  }\n\n  handleLightModeChange(e) {\n    this.setState({lightMode: e});\n    if(localStorage) {\n      localStorage.lightMode = e;\n    }\n  }\n\n  handleInputChange(input) {\n    this.setState({input});\n  }\n\n  turnOffError() {\n    this.setState({error: 0});\n  }\n\n  async getNewWeather() {\n    try {\n    let newCity = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.input}&APPID=c67eaa7e77ad12d3669b53dc4b0112e2&units=metric`);\n    let newCityRes = await newCity.json();\n    console.log(newCityRes);\n    if (newCityRes.cod === 200) {\n      this.setState({weatherObj: newCityRes});\n      if (localStorage) {\n        if (localStorage.city) {\n          localStorage.city = newCityRes.name;\n        }\n      }\n      this.setState({input: \"\"});\n    } else {\n      this.setState({input: \"\"});\n      this.setState({error: 1});\n    }\n\n  }\n  catch(err) {\n    console.log(err);\n  }\n  }\n\n  async propositionClick(e) {\n\n  await this.setState({input: e});\n  this.getNewWeather();\n  }\n\n  render() {\n    let darkMode;\n    if(this.state.lightMode === \"true\") {\n      darkMode = \"\";\n    } else {\n      darkMode = 'dark-main';\n    }\n    console.log(this.state.lightMode);\n    console.log(darkMode);\n  return (\n    <div className='wrapper'>\n      <div className={`main ${darkMode}`}>\n        <TopPart mainIcon={television}\n                 lightMode={this.state.lightMode}\n                 changeLightMode={this.handleLightModeChange}\n                 checkSomething={this.checkSomething}\n                 />\n\n        <InputPart handleInputChange={this.handleInputChange}\n                   inputValue={this.state.input}\n                   flagValue={this.state.weatherObj.sys}\n                   startSearchingNewCity={this.getNewWeather}\n                   cities={this.state.cities}\n                   propositionClick={this.propositionClick}\n                   />\n        <InfoPart television={television}\n                  weatherObj={this.state.weatherObj}/>\n        <AppInfoPart />\n        {this.state.error === 1 ? <NoCity turnOffError={this.turnOffError} /> : <div></div>}\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}